CPS-converted transitive closure function | Spencer Tipping
Licensed under the terms of the MIT source code license

Motivation.
JavaScript uses nonblocking server IO, so this requires CPS-converted code (e.g. doSomething(function (result) {...})). One useful function, though tedious to write by hand, is the transitive
closure relation; that is, given some function x -> [x1, x2, x3, ..., xn], perform a depth-first search until f(xi) == [] for each i. A common use case for this is when you have a directed
acyclic graph (such as a tree) and you want to grab all of the descendants of a node asynchronously.

This library tries to make such things straightforward by abstracting away the depth-first traversal. It assumes that you want an array of results (one item per node traversed), and you can
specify additional nodes to traverse. The usage looks like this:

| cps_transitive_closure (initial_set,
                          function (x, k) {
                            k (element_for_x, additional_elements);
                          },
                          function (result) {
                            alert (result.join (', '));
                          });

Specifically, the three arguments to cps_transitive_closure are:

| 1. The initial set of elements to enqueue in the search space. This is an array.
  2. A function that takes two arguments, the first being an element and the second being a continuation, and invokes the continuation with a value to append to the resulting array and
     optionally an array of additional elements that will need to be explored.
  3. A callback to receive the resulting array.

var cps_transitive_closure = function (initial_set, f, cc) {
  var queue = Array.prototype.slice.call (initial_set),
     result = [],
        one = function () {
                if (! queue.length) cc(result);
                else {
                  return f (queue.shift(), function (x, qs) {
                    queue = queue.concat (qs || []);
                    result.push(x);
                    return one();
                  });
                }
              };
  return one();
};
